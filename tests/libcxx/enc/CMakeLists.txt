# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# create a binary for each testcase listed in ../tests.supported

include(add_enclave_executable)
include(${CMAKE_CURRENT_LIST_DIR}/../../../cmake/get_testcase_name.cmake)

# helper lib to contain file needed by some tests
add_library(libcxxtest-support
    enc.cpp
    fuzzing.cpp
    memory_resource.cpp
    )
target_compile_options(libcxxtest-support PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:-std=c++14>
    -Wno-error=attributes
    -Wno-error=maybe-uninitialized
    -Wno-error=strict-overflow
    -Wno-error=unused-local-typedefs
    -Wno-error=unused-variable
    )

check_cxx_compiler_flag(-Wno-error=unused-but-set-variable SUPPORTS_W_NO_UNUSED_BUT_SET_VAR_FLAG)
if (SUPPORTS_W_NO_UNUSED_BUT_SET_VAR_FLAG)
    target_compile_options(libcxxtest-support PRIVATE -Wno-error=unused-but-set-variable)
endif()

target_link_libraries(libcxxtest-support PUBLIC oelibcxx oeenclave)
target_link_libraries(libcxxtest-support INTERFACE -Wl,--undefined=Test)

# helper function to create enclave binary
function(add_libcxx_test_enc NAME CXXFILE)
    #message("libcxx-test NAME=${NAME} CXXFILE=${CXXFILE}")
    add_enclave_executable(libcxxtest-${NAME}_enc sign.conf private.pem
        main.cpp
        )

    target_include_directories(libcxxtest-${NAME}_enc PRIVATE
        ..
        ${PROJECT_SOURCE_DIR}/3rdparty/libcxx/libcxx/test
        ${PROJECT_SOURCE_DIR}/3rdparty/libcxx/libcxx/test/support
        ${PROJECT_SOURCE_DIR}/3rdparty/libcxx/libcxx/fuzzing
        )

    target_compile_options(libcxxtest-${NAME}_enc PRIVATE -Wno-error --std=c++14)
    target_compile_definitions(libcxxtest-${NAME}_enc PRIVATE -DWITH_MAIN -D__TEST__="${CXXFILE}")
    target_link_libraries(libcxxtest-${NAME}_enc libcxxtest-support oeenclave)
endfunction(add_libcxx_test_enc)

# iterate over the supported tests and create a binary for each.
if (ENABLE_FULL_LIBCXX_TESTS)
    file(STRINGS "../tests.supported" alltests)
else()
    file(STRINGS "../tests.supported.default" alltests)
endif()
foreach(testcase ${alltests})
    get_testcase_name(${testcase} name "../../3rdparty/libcxx/libcxx/test/")
    add_libcxx_test_enc("${name}" "${testcase}")
endforeach(testcase)
