// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

verbatim "types.h"

struct EmptyStruct
{
};

struct MyStruct
{
    uint32_t x;
    [count=size] const void* data;
    size_t size;
    [string] const char* str;
};

struct DeepStruct
{
    [count=1] struct MyStruct* flat;
    struct MyStruct mine[3];
};

struct MyObject
{
    uint32_t id;
    [string] const char* name;
};

struct EmbeddedMyObject
{
    struct MyObject object1[1];
    struct MyObject object4[4];
    [count=1] struct MyObject* object;
    struct MyObject object0[];
};

struct ListElem
{
    [count=1] struct ListElem* prev;
    [count=1] struct ListElem* next;
    [string] const char* name;
};
struct Object
{
    size_t id;
    [string] char* name;
};

struct Embedded
{
    uint32_t xxx;
    uint32_t yyy;
    char str[16];
    [string] char cstr[16];
    [count=nobjects] struct Object* objects;
    size_t nobjects;
};

struct Container
{
    [count=size] struct Object* object;
    size_t size;
    bool b;
    struct Embedded e;
    struct Embedded ae[2];
    [count=arrSize] uint32_t* arrData;
    size_t arrSize;
    [unchecked] struct DefinedStruct definedStruct;
    [unchecked] struct UndefinedStruct* undefinedStruct;

    // unimplemented [count=size] const char* strings[2];
    //size numStrings;

    [count=sizevarr] const void* varr;
    size_t sizevarr;
};

struct AllTypes
{
    int8_t s8;
    uint8_t u8;
    int16_t s16;
    uint16_t u16;
    int32_t s32;
    uint32_t u32;
    int64_t s64;
    uint64_t u64;
    float r32;
    double r64;
    uint8_t by;
    bool b;
    char c;
    size_t s;
    ssize_t ss;
    [string, count=strn] char* str;
    size_t strn;
    [string] char stra[32];
    struct Object obj1;
    [count=1] struct Object* obj2;
    [count=size] uint32_t* data;
    size_t size;
};

struct NewTypes
{
    char s8;
    uint8_t u8;
    int16_t s16;
    uint16_t u16;
    int32_t s32;
    uint32_t u32;
    int64_t s64;
    uint64_t u64;
    float r32;
    double r64;
    int64_t ss;
    uint64_t s;
    int64_t sl;
    uint32_t ui;
    uint64_t ul;
    [unchecked] uint16_t* usp;
    unsigned char uc;
};

struct MyFunctionArgs
{
    [string, in] const char* cstr;
    [string, out, count=nstr] char* str;
    size_t nstr;
    [out, count=1] uint32_t* u32;
    [out] uint32_t u32a[4];
    [string, out] char stra[32];
    [in] struct Object obj;
    [in, out, count=1] struct Object* objp;
    [in, out, count=1] struct Object* objr;
};

function [ocall] int32_t UCopy(
    [out, count=m] char* p, 
    [in] size_t m,
    [in, count=n] const char* q, 
    [in] size_t n,
    [out, ref, count=1] struct Object* object);

function [ecall] int32_t TCopy(
    [out, count=m] char* p, 
    [in] size_t m,
    [in, count=n] const char* q, 
    [in] size_t n,
    [out, ref, count=1] struct Object* object);

