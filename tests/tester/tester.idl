// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

struct Date
{
    uint32_t mm;
    uint32_t dd;
    uint32_t yyyy;
};

struct Object
{
    size_t id;
    [string] char* name;
};

struct Node
{
    uint32_t value;
    [one] struct Node* next;
};

function [ecall] void ReturnVoid();

function [ecall] uint32_t ReturnUint32();

function [ecall, string] char* ReturnStr();

function [ecall] struct Date ReturnDate();

function [ecall] struct Object ReturnObject();

function [ecall, count=count] struct Object* ReturnObjects(
    [in] size_t count);

function [ecall, one] struct Node* ReturnLinkedList();

function [ecall, string] char* TestStrdup(
    [string, in] const char* s);

function [ecall] int32_t CopyObject(
    [inout, one] struct Object* dest,
    [in, one] const struct Object* src);

function [ecall] int32_t CopyObjects(
    [out] struct Object dest[2],
    [in] const struct Object src[2]);

function [ecall] int32_t ECALL_MultipleParams(
    [in, string] const char* strIn,
    [in] uint32_t numIn,
    [in, one] const struct Object* objectIn,
    [out, string, count=128] char* strOut,
    [out, one] uint32_t* numOut,
    [out, one] struct Object* objectOut,
    [out, one, ref] struct Object* objectRefOut);

function [ocall] int32_t OCALL_MultipleParams(
    [in, string] const char* strIn,
    [in] uint32_t numIn,
    [in, one] const struct Object* objectIn,
    [out, string, count=128] char* strOut,
    [out, one] uint32_t* numOut,
    [out, one] struct Object* objectOut,
    [out, one, ref] struct Object* objectRefOut);

function [ecall] int32_t GetObjectRef(
    [out, ref, one] struct Object* object);

function [ecall] int32_t ModifyObject(
    [inout, one] struct Object* object);

function [ecall] size_t TestStrlcpy(
    [out, string, count=dsize] char* dest,
    [in, string] const char* src,
    [in] size_t dsize);

function [ecall] size_t TestOptQualifier(
    [opt, out, string, count=p1size] char* p1,
    [opt, in, string] const char* p2,
    [in] size_t p1size);

function [ecall, opt, count=n] int32_t* ReturnIntPtr(
    [inout, opt, count=n] int32_t* p,
    [in] size_t n);

function [ecall] void TestCallback(
    [in, unchecked] void* func);

function [ecall] bool TestIntPtrRef(
    [out, ref, count=n] int32_t* intPtrOut,
    [in] size_t n);

function [ecall] void TestBufferOverrun(
    [out] char src[8]);

function [ecall, unchecked] void* ReturnEnclaveMemory();

function [ecall] void TestBufferCopy(
    [out, count=n] void* dest,
    [in, count=n] const void* src,
    [in] size_t n,
    [in] bool forceOverwrite);

