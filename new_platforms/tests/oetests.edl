/* Copyright (c) Microsoft Corporation. All rights reserved. */
/* Licensed under the MIT License. */
enclave {
    from "openenclave/socket.edl" import *;
	from "openenclave/stdio.edl" import *;

    trusted {
        /* define ECALLs here. */
        public void ecall_DoNothing();
        public oe_result_t ecall_ReturnOk();
        public int ecall_PrintString([in, string] const char* fmt, [in, string] const char* arg);
        public int ecall_BufferToInt([out] int* output, [in, size=size] const void* buffer, size_t size);
        public oe_result_t ecall_TestOcall();
        public void ecall_CopyInt([in] const int* input, [out] int* output);
        public oe_result_t ecall_RunClient([in, string] const char* server, [in, string] const char* port);
        public oe_result_t ecall_StartServer([in, string] const char* port);
        public oe_result_t ecall_FinishServer();
        public oe_result_t ecall_TestOEIsWithinEnclave([user_check] void* outside, int size);
        public oe_result_t ecall_TestOEIsOutsideEnclave([user_check] void* outside, int size);
        public oe_result_t ecall_TestOERandom();
        public oe_result_t ecall_TestOEGetReportV1(uint32_t flags);
        public oe_result_t ecall_TestOEGetReportV2(uint32_t flags);
        public oe_result_t ecall_TestOEGetTargetInfoV1(uint32_t flags);
        public oe_result_t ecall_TestOEGetTargetInfoV2(uint32_t flags);
        public oe_result_t ecall_TestOEExceptions();
        public oe_result_t ecall_TestOEGetSealKeyV1(int policy);
        public oe_result_t ecall_TestOEGetSealKeyV2(int policy);
        public oe_result_t ecall_TestOEGetPublicKey(int policy);
        public oe_result_t ecall_TestOEGetPrivateKey(int policy);
        public oe_result_t ecall_TestOEFopen();
        public void* ecall_OEHostMalloc(int size);
        public void* ecall_OEHostCalloc(int nmemb, int size);
        public void* ecall_OEHostRealloc([user_check] void* ptr, int size);
        public char* ecall_OEHostStrndup([in, string] const char* str, int size);
        public void ecall_OEHostFree([user_check] void* ptr);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_DoNothing();
        void ocall_PrintString([in, string] const char* fmt, [in, string] const char* arg);
        int ocall_BufferToInt([in, size=size] const void* buffer, size_t size);
        int ocall_ReturnInputArgument(int input);
    };
};
