doxygen
{
    xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
    xsi:noNamespaceSchemaLocation=compound.xsd
    version=1.8.11
    compounddef
    {
        id=enclave_8h
        kind=file
        language=C++
        compoundname
        {
            chars="enclave.h"
        }
        includes
        {
            local=yes
            chars="bits/context.h"
        }
        includes
        {
            local=no
            chars="openenclave/defs.h"
        }
        includes
        {
            local=no
            chars="openenclave/types.h"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/bits/sgxtypes.h"
        }
        includes
        {
            local=no
            chars="openenclave/bits/sha.h"
        }
        includes
        {
            local=no
            chars="openenclave/result.h"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/bits/jump.h"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/bits/load.h"
        }
        includes
        {
            local=yes
            chars="bits/sha.h"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/defs.h"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/bits/constants_x64.inc"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/result.h"
        }
        includes
        {
            local=yes
            chars="/root/openenclave/include/openenclave/types.h"
        }
        includes
        {
            local=yes
            chars="defs.h"
        }
        includes
        {
            refid=thread_8h
            local=yes
            chars="thread.h"
        }
        includes
        {
            local=yes
            chars="types.h"
        }
        incdepgraph
        {
            node
            {
                id=17
                label
                {
                    chars="/root/openenclave/include/openenclave/defs.h"
                }
            }
            node
            {
                id=8
                label
                {
                    chars="bits/context.h"
                }
            }
            node
            {
                id=19
                label
                {
                    chars="/root/openenclave/include/openenclave/result.h"
                }
            }
            node
            {
                id=7
                label
                {
                    chars="/root/openenclave/include/openenclave/enclave.h"
                }
                link
                {
                    refid=enclave.h
                }
                childnode
                {
                    refid=8
                    relation=include
                }
                childnode
                {
                    refid=9
                    relation=include
                }
                childnode
                {
                    refid=10
                    relation=include
                }
                childnode
                {
                    refid=11
                    relation=include
                }
                childnode
                {
                    refid=12
                    relation=include
                }
                childnode
                {
                    refid=13
                    relation=include
                }
                childnode
                {
                    refid=14
                    relation=include
                }
                childnode
                {
                    refid=15
                    relation=include
                }
                childnode
                {
                    refid=16
                    relation=include
                }
                childnode
                {
                    refid=17
                    relation=include
                }
                childnode
                {
                    refid=18
                    relation=include
                }
                childnode
                {
                    refid=19
                    relation=include
                }
                childnode
                {
                    refid=20
                    relation=include
                }
                childnode
                {
                    refid=21
                    relation=include
                }
                childnode
                {
                    refid=22
                    relation=include
                }
                childnode
                {
                    refid=23
                    relation=include
                }
            }
            node
            {
                id=18
                label
                {
                    chars="/root/openenclave/include/openenclave/bits/constants_x64.inc"
                }
            }
            node
            {
                id=22
                label
                {
                    chars="thread.h"
                }
                link
                {
                    refid=thread_8h
                }
                childnode
                {
                    refid=21
                    relation=include
                }
                childnode
                {
                    refid=23
                    relation=include
                }
            }
            node
            {
                id=9
                label
                {
                    chars="openenclave/defs.h"
                }
            }
            node
            {
                id=12
                label
                {
                    chars="openenclave/bits/sha.h"
                }
            }
            node
            {
                id=15
                label
                {
                    chars="/root/openenclave/include/openenclave/bits/load.h"
                }
            }
            node
            {
                id=21
                label
                {
                    chars="defs.h"
                }
            }
            node
            {
                id=10
                label
                {
                    chars="openenclave/types.h"
                }
            }
            node
            {
                id=16
                label
                {
                    chars="bits/sha.h"
                }
            }
            node
            {
                id=14
                label
                {
                    chars="/root/openenclave/include/openenclave/bits/jump.h"
                }
            }
            node
            {
                id=20
                label
                {
                    chars="/root/openenclave/include/openenclave/types.h"
                }
            }
            node
            {
                id=23
                label
                {
                    chars="types.h"
                }
            }
            node
            {
                id=13
                label
                {
                    chars="openenclave/result.h"
                }
            }
            node
            {
                id=11
                label
                {
                    chars="/root/openenclave/include/openenclave/bits/sgxtypes.h"
                }
            }
        }
        sectiondef
        {
            kind=define
            memberdef
            {
                kind=define
                id=enclave_8h_1a446fd9dde5f0bb30b684c01ef7ed1dbf
                prot=public
                static=no
                name
                {
                    chars="OE_BUILD_ENCLAVE"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=20
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=20
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a17442f9c583fe8a12b684c9e4146b9e5
                prot=public
                static=no
                name
                {
                    chars="OE_ECALL"
                }
                initializer
                {
                    chars="OE_EXTERNC OE_EXPORT __attribute__((section(".ecall")))"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=23
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=23
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a55c5504c4406dc840191fe066bcf063e
                prot=public
                static=no
                name
                {
                    chars="OE_REPORT_DATA_SIZE"
                }
                initializer
                {
                    chars="64"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=25
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=25
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a62801dd8df2ce1785f9e81ee541a973a
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_DIVIDE_BY_ZERO"
                }
                initializer
                {
                    chars="0x0"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=28
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=28
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a6138381b065c175f7e145cf77b994260
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_BREAKPOINT"
                }
                initializer
                {
                    chars="0x1"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=29
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=29
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1aeac1179cd2dc2a8e25510f4e64f68e73
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_BOUND_OUT_OF_RANGE"
                }
                initializer
                {
                    chars="0x2"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=30
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=30
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a6f83d40dd7e1a4f5cb15d72d2c4f2640
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_ILLEGAL_INSTRUCTION"
                }
                initializer
                {
                    chars="0x3"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=31
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=31
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1aba33581963869f65745f0d2abe257eb0
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_ACCESS_VIOLATION"
                }
                initializer
                {
                    chars="0x4"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=32
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=32
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a5ab69e7d10ec473ee853ffa4d92aa017
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_PAGE_FAULT"
                }
                initializer
                {
                    chars="0x5"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=33
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=33
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1ada9c24b738cfa0146d0705dcb79f3030
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_X87_FLOAT_POINT"
                }
                initializer
                {
                    chars="0x6"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=34
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=34
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1abba9790193ebb0342cfcec322ad465a5
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_MISALIGNMENT"
                }
                initializer
                {
                    chars="0x7"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=35
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=35
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a0fac4034618323fc601b1f6739006d95
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_SIMD_FLOAT_POINT"
                }
                initializer
                {
                    chars="0x8"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=36
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=36
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1afed60ffaf114676db50633e179952c84
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_UNKOWN"
                }
                initializer
                {
                    chars="0xFFFFFFFF"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=37
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=37
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1a3660d67efdd819112d76c2d0fffcf608
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_HARDWARE"
                }
                initializer
                {
                    chars="0x1"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=40
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=40
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_1aad7af0ec369e7feefc598ff3c57f1431
                prot=public
                static=no
                name
                {
                    chars="OE_EXCEPTION_SOFTWARE"
                }
                initializer
                {
                    chars="0x2"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=41
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=41
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=enclave_8h_a1df224cdefe0cfb6726a3c55dbf51ef9_1a1df224cdefe0cfb6726a3c55dbf51ef9
                prot=public
                static=no
                name
                {
                    chars="OE_Assert"
                }
                param
                {
                    defname
                    {
                        chars="EXPR"
                    }
                }
                initializer
                {
                    ref
                    {
                        refid=enclave_8h_afb7d4049a4bc01b8e5ba49741e447a16_1afb7d4049a4bc01b8e5ba49741e447a16
                        kindref=member
                        chars="__OE_AssertFail"
                    }
                    chars="do                                                                \\n    {                                                                 \\n        if (!(EXPR))                                                  \\n            (#EXPR, __FILE__, __LINE__, __FUNCTION__); \\n    } while (0)"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=335
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/enclave.h
                    bodystart=335
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=func
            memberdef
            {
                kind=function
                id=enclave_8h_a78fb6ff9e998dd578567f65f1f66ef92_1a78fb6ff9e998dd578567f65f1f66ef92
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_AddVectoredExceptionHandler"
                }
                argsstring
                {
                    chars="(uint64_t isFirstHandler, POE_VECTORED_EXCEPTION_HANDLER vectoredHandler)"
                }
                name
                {
                    chars="OE_AddVectoredExceptionHandler"
                }
                param
                {
                    type
                    {
                        chars="uint64_t"
                    }
                    declname
                    {
                        chars="isFirstHandler"
                    }
                }
                param
                {
                    type
                    {
                        chars="POE_VECTORED_EXCEPTION_HANDLER"
                    }
                    declname
                    {
                        chars="vectoredHandler"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Register a new vectored exception handler."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="Call this function to add a new vectored exception handler. If successful, the registered handler will be called when an exception happens inside enclave."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="isFirstHandler"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The parameter indicates if the input handler should be the first exception handler to be called. If it is zero, the input handler will be append to the end of exception handler chain, otherwise it will be added as the first one in the exception handler chain."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="vectoredHandler"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The input vectored exception handler to register. It must be a function defined in the enclave. The same handler can only be registered once; a 2nd registration will fail."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                ref
                                {
                                    refid=enclave_8h_a721105240a9d051a94ed6826f61518af_1a721105240a9d051a94ed6826f61518af
                                    kindref=member
                                    chars="OE_RemoveVectoredExceptionHandler()"
                                }
                                chars="This function returns an opaque pointer to the registered handler on success, or NULL on failure. A caller can use a successfully returned pointer to call  to unregister the handler later."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=62
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a721105240a9d051a94ed6826f61518af_1a721105240a9d051a94ed6826f61518af
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="uint64_t"
                }
                definition
                {
                    chars="uint64_t OE_RemoveVectoredExceptionHandler"
                }
                argsstring
                {
                    chars="(void *vectoredHandler)"
                }
                name
                {
                    chars="OE_RemoveVectoredExceptionHandler"
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="vectoredHandler"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Remove an existing vectored exception handler."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="vectoredHandler"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        ref
                                        {
                                            refid=enclave_8h_a78fb6ff9e998dd578567f65f1f66ef92_1a78fb6ff9e998dd578567f65f1f66ef92
                                            kindref=member
                                            chars="OE_AddVectoredExceptionHandler()"
                                        }
                                        chars="The pointer to a registered exception handler returned from a successful  call."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="This function returns 0 on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=74
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a3f4d990cf1e916d65a82481a55aafbf4_1a3f4d990cf1e916d65a82481a55aafbf4
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    ref
                    {
                        refid=result_8h_1a8b77a983dd95c4363477cb3abbd099d0
                        kindref=member
                        chars="OE_Result"
                    }
                }
                definition
                {
                    chars="OE_Result OE_CallHost"
                }
                argsstring
                {
                    chars="(const char *func, void *args)"
                }
                name
                {
                    chars="OE_CallHost"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="args"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Perform a high-level enclave function call (OCALL)."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="func"
                        }
                        verbatim
                        {
                            chars="OE_OCALL void (*)(void* args);"
                        }
                        chars="Call the host function whose name is given by the  parameter. The host must define a corresponding function with the following prototype."
                    }
                    para
                    {
                        bold
                        {
                            chars="args"
                        }
                        chars="The meaning of the  parameter is defined by the implementer of the function and may be null."
                    }
                    para
                    {
                        bold
                        {
                            chars="OE_FUNC_CALL_HOST"
                        }
                        chars="This function is implemented using the low-level OE_ECall() interface where the function number is given by the  constant."
                    }
                    para
                    {
                        bold
                        {
                            chars="args"
                        }
                        chars="Note that the return value of this function only indicates the success of the call and not of the underlying function. The OCALL implementation must define its own error reporting scheme based on ."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="func"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The name of the enclave function that will be called."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="args"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The arguments to be passed to the enclave function."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                bold
                                {
                                    chars="OE_OK"
                                }
                                chars="This function return  on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=101
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a02ef8b20b64a998bb97dfbdddb0c6ba5_1a02ef8b20b64a998bb97dfbdddb0c6ba5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="bool"
                }
                definition
                {
                    chars="bool OE_IsWithinEnclave"
                }
                argsstring
                {
                    chars="(const void *ptr, size_t size)"
                }
                name
                {
                    chars="OE_IsWithinEnclave"
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="ptr"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Check whether the given buffer is strictly within the enclave."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="ptr"
                        }
                        bold
                        {
                            chars="size"
                        }
                        chars="Check whether the buffer given by the  and  parameters is strictly within the enclave's memory. If so, return true. If any portion of the buffer lies outside the enclave's memory, return false."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="ptr"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The pointer pointer to buffer."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The size of buffer"
                                    }
                                }
                            }
                        }
                        parameterlist
                        {
                            kind=retval
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="true"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The buffer is strictly within the enclave."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="false"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="At least some part of the buffer is outside the enclave."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=117
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a33b395779e9fe73102bfe728261917a6_1a33b395779e9fe73102bfe728261917a6
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="bool"
                }
                definition
                {
                    chars="bool OE_IsOutsideEnclave"
                }
                argsstring
                {
                    chars="(const void *ptr, size_t size)"
                }
                name
                {
                    chars="OE_IsOutsideEnclave"
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="ptr"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Check whether the given buffer is strictly outside the enclave."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="ptr"
                        }
                        bold
                        {
                            chars="size"
                        }
                        chars="Check whether the buffer given by the  and  parameters is strictly outside the enclave's memory. If so, return true. If any portion of the buffer lies within the enclave's memory, return false."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="ptr"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The pointer to buffer."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The size of buffer."
                                    }
                                }
                            }
                        }
                        parameterlist
                        {
                            kind=retval
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="true"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The buffer is strictly outside the enclave."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="false"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="At least some part of the buffer is within the enclave."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=133
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_ab4b70d7070180862df4e92b590fc941d_1ab4b70d7070180862df4e92b590fc941d
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    ref
                    {
                        refid=result_8h_1a8b77a983dd95c4363477cb3abbd099d0
                        kindref=member
                        chars="OE_Result"
                    }
                }
                definition
                {
                    chars="OE_Result OE_GetReportForRemoteAttestation"
                }
                argsstring
                {
                    chars="(const uint8_t reportData[OE_REPORT_DATA_SIZE], void *report, size_t *reportSize)"
                }
                name
                {
                    chars="OE_GetReportForRemoteAttestation"
                }
                param
                {
                    type
                    {
                        chars="const uint8_t"
                    }
                    declname
                    {
                        chars="reportData"
                    }
                    array
                    {
                        chars="[OE_REPORT_DATA_SIZE]"
                    }
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="report"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t *"
                    }
                    declname
                    {
                        chars="reportSize"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Get a report for use in remote attestation."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="reportData"
                        }
                        chars="This function creates a report to be used in remote attestation. The report shall contain the data given by the  parameter. The following steps are performed:"
                    }
                    para
                    {
                        itemizedlist
                        {
                            listitem
                            {
                                para
                                {
                                    bold
                                    {
                                        chars="target information"
                                    }
                                    chars="Calls into the host to request that the AESM service initialize the quote. This step obtains  for the enclave that will eventually sign the quote (the Intel(R) quote enclave)."
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    bold
                                    {
                                        chars="target information"
                                    }
                                    bold
                                    {
                                        chars="report data"
                                    }
                                    bold
                                    {
                                        chars="report"
                                    }
                                    chars="Executes the ENCLU.EREPORT instruction to generate the report, passing it the  and . This instruction fills in the  output parameter."
                                }
                            }
                        }
                    }
                    para
                    {
                        ref
                        {
                            refid=host_8h_a0d2e9102af51fc63e9895612310392f5_1a0d2e9102af51fc63e9895612310392f5
                            kindref=member
                            chars="OE_GetQuote()"
                        }
                        chars="The next step is to pass the newly created report to the host so it can get a quote for this report from the Intel(R) quote enclave. See the  host function for further details."
                    }
                    para
                    {
                        emphasis
                        {
                            chars="reportSize"
                        }
                        chars="If the  parameter is too small, this function resets it to the required size and returns OE_BUFFER_TOO_SMALL."
                    }
                    para
                    {
                        bold
                        {
                            chars="Caution:"
                        }
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="reportData"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The report data that will be included in the report."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="report"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The buffer where the report will be copied."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="reportSize"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="report"
                                        }
                                        chars="The size of the  buffer."
                                    }
                                }
                            }
                        }
                        parameterlist
                        {
                            kind=retval
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_OK"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The report was successfully created."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_INVALID_PARAMETER"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="At least one parameter is invalid."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_BUFFER_TOO_SMALL"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="report"
                                        }
                                        chars="The  buffer is too small."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_OUT_OF_MEMORY"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Failed to allocate host heap memory."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=169
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a3593f7245e4dfc759435d3815eeccf51_1a3593f7245e4dfc759435d3815eeccf51
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="int"
                }
                definition
                {
                    chars="int OE_HostPrintf"
                }
                argsstring
                {
                    chars="(const char *fmt,...)"
                }
                name
                {
                    chars="OE_HostPrintf"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="fmt"
                    }
                }
                param
                {
                    type
                    {
                        chars="..."
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Print formatted characters to the host's console."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function writes formatted characters to the host console. It is based on OE_Vsnprintf(), which has limited support for format types."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="fmt"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The limited printf style format."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="The number of characters that were written."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=186
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a70c2f5823298203226ec746864a33eb5_1a70c2f5823298203226ec746864a33eb5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_HostAllocForCallHost"
                }
                argsstring
                {
                    chars="(size_t size, size_t alignment, bool isZeroInit)"
                }
                name
                {
                    chars="OE_HostAllocForCallHost"
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="alignment"
                    }
                }
                param
                {
                    type
                    {
                        chars="bool"
                    }
                    declname
                    {
                        chars="isZeroInit"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Allocates space for parameters of the next call to host on the host's stack frame."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="size"
                        }
                        bold
                        {
                            chars="alignment"
                        }
                        chars="This function allocates  bytes of space on the stack frame of the host. The returned address will be a multiple of  (if non-zero). The allocated space is freed automatically when the OCALL returns. If the stack overflows, the behavior is undefined."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The number of bytes to allocate."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="alignment"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The alignment requirement (see above)."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="isZeroInit"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Whether the allocated memory is zero-initialized."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns the address of the allocated space."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=204
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_aba7207f5f5dd14d9e740548dd8b6b3fd_1aba7207f5f5dd14d9e740548dd8b6b3fd
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_HostMalloc"
                }
                argsstring
                {
                    chars="(size_t size)"
                }
                name
                {
                    chars="OE_HostMalloc"
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Allocate bytes from the host's heap."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="size"
                        }
                        ref
                        {
                            refid=enclave_8h_af7ed072613e44809e1991f4f64c63b23_1af7ed072613e44809e1991f4f64c63b23
                            kindref=member
                            chars="OE_HostFree()"
                        }
                        chars="This function allocates  bytes from the host's heap and returns the address of the allocated memory. The implementation performs an OCALL to the host, which calls malloc(). To free the memory, it must be passed to ."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The number of bytes to be allocated."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="The allocated memory or NULL if unable to allocate the memory."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=219
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a9710b76344a56ca798b6b794e6400702_1a9710b76344a56ca798b6b794e6400702
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_HostRealloc"
                }
                argsstring
                {
                    chars="(void *ptr, size_t size)"
                }
                name
                {
                    chars="OE_HostRealloc"
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="ptr"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Reallocate bytes from the host's heap."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="ptr"
                        }
                        bold
                        {
                            chars="size"
                        }
                        ref
                        {
                            refid=enclave_8h_af7ed072613e44809e1991f4f64c63b23_1af7ed072613e44809e1991f4f64c63b23
                            kindref=member
                            chars="OE_HostFree()"
                        }
                        chars="This function changes the size of the memory block pointed to by  on the host's heap to  bytes. The memory block may be moved to a new location, which is returned by this function. The implementation performs an OCALL to the host, which calls realloc(). To free the memory, it must be passed to ."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="ptr"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="size"
                                        }
                                        chars="The memory block to change the size of. If NULL, this method allocates  bytes as if OE_HostMalloc was invoked. If not NULL, it should be a pointer returned by a previous call to OE_HostCalloc, OE_HostMalloc or OE_HostRealloc."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="ptr"
                                        }
                                        chars="The number of bytes to be allocated. If 0, this method deallocates the memory at . If the new size is larger, the value of the memory in the new allocated range is indeterminate."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                bold
                                {
                                    chars="ptr"
                                }
                                bold
                                {
                                    chars="size"
                                }
                                bold
                                {
                                    chars="ptr"
                                }
                                chars="The pointer to the reallocated memory or NULL if  was freed by setting  to 0. This method also returns NULL if it was unable to reallocate the memory, in which case the original  remains valid and its contents are unchanged."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=244
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a135af92bdf694591e1de1f8a61054511_1a135af92bdf694591e1de1f8a61054511
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_HostCalloc"
                }
                argsstring
                {
                    chars="(size_t nmemb, size_t size)"
                }
                name
                {
                    chars="OE_HostCalloc"
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="nmemb"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="size"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Allocate zero-filled bytes from the host's heap."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="size"
                        }
                        ref
                        {
                            refid=enclave_8h_af7ed072613e44809e1991f4f64c63b23_1af7ed072613e44809e1991f4f64c63b23
                            kindref=member
                            chars="OE_HostFree()"
                        }
                        chars="This function allocates  bytes from the host's heap and fills it with zero character. It returns the address of the allocated memory. The implementation performs an OCALL to the host, which calls calloc(). To free the memory, it must be passed to ."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="size"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The number of bytes to be allocated and zero-filled."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="The allocated memory or NULL if unable to allocate the memory."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=259
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_af7ed072613e44809e1991f4f64c63b23_1af7ed072613e44809e1991f4f64c63b23
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void"
                }
                definition
                {
                    chars="void OE_HostFree"
                }
                argsstring
                {
                    chars="(void *ptr)"
                }
                name
                {
                    chars="OE_HostFree"
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="ptr"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Releases allocated memory."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        ref
                        {
                            refid=enclave_8h_aba7207f5f5dd14d9e740548dd8b6b3fd_1aba7207f5f5dd14d9e740548dd8b6b3fd
                            kindref=member
                            chars="OE_HostMalloc()"
                        }
                        ref
                        {
                            refid=enclave_8h_a135af92bdf694591e1de1f8a61054511_1a135af92bdf694591e1de1f8a61054511
                            kindref=member
                            chars="OE_HostCalloc()"
                        }
                        chars="This function releases memory allocated with  or  by performing an OCALL where the host calls free()."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="ptr"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Pointer to memory to be released or null."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=270
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_ad209d33cb2de70ea70aee5a167a02d03_1ad209d33cb2de70ea70aee5a167a02d03
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="char *"
                }
                definition
                {
                    chars="char* OE_HostStrdup"
                }
                argsstring
                {
                    chars="(const char *str)"
                }
                name
                {
                    chars="OE_HostStrdup"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="str"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Make a heap copy of a string."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="str"
                        }
                        chars="This function allocates memory on the host's heap, copies the  parameter to that memory, and returns a pointer to the newly allocated memory."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="str"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The string to be copied."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="A pointer to the newly allocated string or NULL if unable to allocate the storage."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=284
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_a8e55d0688551186025aae154d22249b5_1a8e55d0688551186025aae154d22249b5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void"
                }
                definition
                {
                    chars="void OE_Abort"
                }
                argsstring
                {
                    chars="(void)"
                }
                name
                {
                    chars="OE_Abort"
                }
                param
                {
                    type
                    {
                        chars="void"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Abort execution by causing and illegal instruction exception."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        chars="This function aborts execution by executing the UD2 instruction."
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=291
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_ae655f9a81dc40863b43a681793b277f9_1ae655f9a81dc40863b43a681793b277f9
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void *"
                }
                definition
                {
                    chars="void* OE_Sbrk"
                }
                argsstring
                {
                    chars="(ptrdiff_t increment)"
                }
                name
                {
                    chars="OE_Sbrk"
                }
                param
                {
                    type
                    {
                        chars="ptrdiff_t"
                    }
                    declname
                    {
                        chars="increment"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Enclave implementation of the standard Unix sbrk() system call."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="increment"
                        }
                        ref
                        {
                            refid=enclave_8h_ae655f9a81dc40863b43a681793b277f9_1ae655f9a81dc40863b43a681793b277f9
                            kindref=member
                            chars="OE_Sbrk()"
                        }
                        chars="This function provides an enclave equivalent to the sbrk() system call. It increments the current end of the heap by  bytes. Calling  with an increment of 0, returns the current end of the heap."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="increment"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="Number of bytes to increment the heap end by."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                bold
                                {
                                    chars="increment"
                                }
                                chars="The old end of the heap (before the increment) or (void*)-1 if there are less than  bytes left on the heap."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=306
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=enclave_8h_afb7d4049a4bc01b8e5ba49741e447a16_1afb7d4049a4bc01b8e5ba49741e447a16
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    chars="void"
                }
                definition
                {
                    chars="void __OE_AssertFail"
                }
                argsstring
                {
                    chars="(const char *expr, const char *file, int line, const char *func)"
                }
                name
                {
                    chars="__OE_AssertFail"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="expr"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="file"
                    }
                }
                param
                {
                    type
                    {
                        chars="int"
                    }
                    declname
                    {
                        chars="line"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Called whenever an assertion fails."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        verbatim
                        {
                            chars="OE_Assert(x > y);"
                        }
                        chars="This internal function is called when the expression of the OE_Assert() macro evaluates to zero. For example:"
                    }
                    para
                    {
                        chars="If the expression evaluates to zero, this function is called with the string representation of the expression as well as the file, the line, and the function name where the macro was expanded."
                    }
                    para
                    {
                        ref
                        {
                            refid=enclave_8h_afb7d4049a4bc01b8e5ba49741e447a16_1afb7d4049a4bc01b8e5ba49741e447a16
                            kindref=member
                            chars="__OE_AssertFail()"
                        }
                        ref
                        {
                            refid=enclave_8h_a8e55d0688551186025aae154d22249b5_1a8e55d0688551186025aae154d22249b5
                            kindref=member
                            chars="OE_Abort()"
                        }
                        chars="The  function performs a host call to print a message and then calls ."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="expr"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The argument of the OE_Assert() macro."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="file"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The name of the file where OE_Assert() was invoked."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="file"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The line number where OE_Assert() was invoked."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="line"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The name of the function that invoked OE_Assert()."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/enclave.h
                    line=329
                    column=1
                }
            }
        }
        briefdescription
        {
            para
            {
                chars="This file defines the programming interface for developing enclaves."
            }
        }
        detaileddescription
        {
        }
        programlisting
        {
            codeline
            {
                lineno=1
            }
            codeline
            {
                lineno=7
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifndef_OE_ENCLAVE_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=8
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#define_OE_ENCLAVE_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=9
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=10
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"bits/context.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=11
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"bits/sha.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=12
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"defs.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=13
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    ref
                    {
                        refid=result_8h
                        kindref=compound
                        chars="result.h"
                    }
                    chars="#include"""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=14
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    ref
                    {
                        refid=thread_8h
                        kindref=compound
                        chars="thread.h"
                    }
                    chars="#include"""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=15
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"types.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=16
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=17
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_BEGIN"
                }
            }
            codeline
            {
                lineno=18
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=19
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifndefOE_BUILD_ENCLAVE"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=20
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#defineOE_BUILD_ENCLAVE"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=21
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    chars="#endif"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=22
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=23
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_ECALLOE_EXTERNCOE_EXPORT__attribute__((section(".ecall")))"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=24
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=25
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_REPORT_DATA_SIZE64"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=26
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=27
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="//Exceptioncodes."
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=28
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_DIVIDE_BY_ZERO0x0"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=29
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_BREAKPOINT0x1"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=30
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_BOUND_OUT_OF_RANGE0x2"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=31
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_ILLEGAL_INSTRUCTION0x3"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=32
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_ACCESS_VIOLATION0x4"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=33
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_PAGE_FAULT0x5"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=34
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_X87_FLOAT_POINT0x6"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=35
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_MISALIGNMENT0x7"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=36
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_SIMD_FLOAT_POINT0x8"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=37
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_UNKOWN0xFFFFFFFF"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=38
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=39
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="//Exceptionflags."
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=40
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_HARDWARE0x1"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=41
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_EXCEPTION_SOFTWARE0x2"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=42
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=62
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a78fb6ff9e998dd578567f65f1f66ef92_1a78fb6ff9e998dd578567f65f1f66ef92
                        kindref=member
                        chars="OE_AddVectoredExceptionHandler"
                    }
                    chars="*("
                }
            }
            codeline
            {
                lineno=63
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint64_tisFirstHandler,"
                }
            }
            codeline
            {
                lineno=64
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="POE_VECTORED_EXCEPTION_HANDLERvectoredHandler);"
                }
            }
            codeline
            {
                lineno=65
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=74
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a721105240a9d051a94ed6826f61518af_1a721105240a9d051a94ed6826f61518af
                        kindref=member
                        chars="OE_RemoveVectoredExceptionHandler"
                    }
                    chars="uint64_t("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*vectoredHandler);"
                }
            }
            codeline
            {
                lineno=75
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=101
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=result_8h_1a8b77a983dd95c4363477cb3abbd099d0
                        kindref=member
                        chars="OE_Result"
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a3f4d990cf1e916d65a82481a55aafbf4_1a3f4d990cf1e916d65a82481a55aafbf4
                        kindref=member
                        chars="OE_CallHost"
                    }
                    chars="("
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*func,"
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*args);"
                }
            }
            codeline
            {
                lineno=102
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=117
                highlight
                {
                    class=keywordtype
                    chars="bool"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a02ef8b20b64a998bb97dfbdddb0c6ba5_1a02ef8b20b64a998bb97dfbdddb0c6ba5
                        kindref=member
                        chars="OE_IsWithinEnclave"
                    }
                    chars="("
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*ptr,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=118
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=133
                highlight
                {
                    class=keywordtype
                    chars="bool"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a33b395779e9fe73102bfe728261917a6_1a33b395779e9fe73102bfe728261917a6
                        kindref=member
                        chars="OE_IsOutsideEnclave"
                    }
                    chars="("
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*ptr,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=134
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=169
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=result_8h_1a8b77a983dd95c4363477cb3abbd099d0
                        kindref=member
                        chars="OE_Result"
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_ab4b70d7070180862df4e92b590fc941d_1ab4b70d7070180862df4e92b590fc941d
                        kindref=member
                        chars="OE_GetReportForRemoteAttestation"
                    }
                    chars="("
                }
            }
            codeline
            {
                lineno=170
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint8_treportData[OE_REPORT_DATA_SIZE],"
                }
            }
            codeline
            {
                lineno=171
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*report,"
                }
            }
            codeline
            {
                lineno=172
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*reportSize);"
                }
            }
            codeline
            {
                lineno=173
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=185
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="OE_PRINTF_FORMAT(1,2)"
                }
            }
            codeline
            {
                lineno=186
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a3593f7245e4dfc759435d3815eeccf51_1a3593f7245e4dfc759435d3815eeccf51
                        kindref=member
                        chars="OE_HostPrintf"
                    }
                    sp
                    {
                    }
                    chars="int(const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*fmt,...);"
                }
            }
            codeline
            {
                lineno=187
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=204
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a70c2f5823298203226ec746864a33eb5_1a70c2f5823298203226ec746864a33eb5
                        kindref=member
                        chars="OE_HostAllocForCallHost"
                    }
                    chars="*("
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="size,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="alignment,"
                }
                highlight
                {
                    class=keywordtype
                    chars="bool"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="isZeroInit);"
                }
            }
            codeline
            {
                lineno=205
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=219
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_aba7207f5f5dd14d9e740548dd8b6b3fd_1aba7207f5f5dd14d9e740548dd8b6b3fd
                        kindref=member
                        chars="OE_HostMalloc"
                    }
                    chars="*("
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=220
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=244
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a9710b76344a56ca798b6b794e6400702_1a9710b76344a56ca798b6b794e6400702
                        kindref=member
                        chars="OE_HostRealloc"
                    }
                    chars="*("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="*ptr,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=245
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=259
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a135af92bdf694591e1de1f8a61054511_1a135af92bdf694591e1de1f8a61054511
                        kindref=member
                        chars="OE_HostCalloc"
                    }
                    chars="*("
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="nmemb,"
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="size);"
                }
            }
            codeline
            {
                lineno=260
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=270
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_af7ed072613e44809e1991f4f64c63b23_1af7ed072613e44809e1991f4f64c63b23
                        kindref=member
                        chars="OE_HostFree"
                    }
                    chars="("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*ptr);"
                }
            }
            codeline
            {
                lineno=271
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=284
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_ad209d33cb2de70ea70aee5a167a02d03_1ad209d33cb2de70ea70aee5a167a02d03
                        kindref=member
                        chars="OE_HostStrdup"
                    }
                    sp
                    {
                    }
                    chars="*(const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*str);"
                }
            }
            codeline
            {
                lineno=285
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=291
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_a8e55d0688551186025aae154d22249b5_1a8e55d0688551186025aae154d22249b5
                        kindref=member
                        chars="OE_Abort"
                    }
                    chars="("
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    chars=");"
                }
            }
            codeline
            {
                lineno=292
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=306
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_ae655f9a81dc40863b43a681793b277f9_1ae655f9a81dc40863b43a681793b277f9
                        kindref=member
                        chars="OE_Sbrk"
                    }
                    sp
                    {
                    }
                    chars="*(ptrdiff_tincrement);"
                }
            }
            codeline
            {
                lineno=307
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=329
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    ref
                    {
                        refid=enclave_8h_afb7d4049a4bc01b8e5ba49741e447a16_1afb7d4049a4bc01b8e5ba49741e447a16
                        kindref=member
                        chars="__OE_AssertFail"
                    }
                    chars="("
                }
            }
            codeline
            {
                lineno=330
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*expr,"
                }
            }
            codeline
            {
                lineno=331
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*file,"
                }
            }
            codeline
            {
                lineno=332
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="int"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="line,"
                }
            }
            codeline
            {
                lineno=333
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="const"
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*func);"
                }
            }
            codeline
            {
                lineno=334
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=335
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_Assert(EXPR)\"
                }
            }
            codeline
            {
                lineno=336
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="do\"
                }
            }
            codeline
            {
                lineno=337
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="{\"
                }
            }
            codeline
            {
                lineno=338
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="if(!(EXPR))\"
                }
            }
            codeline
            {
                lineno=339
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="__OE_AssertFail(#EXPR,__FILE__,__LINE__,__FUNCTION__);\"
                }
            }
            codeline
            {
                lineno=340
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="}while(0)"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=341
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=342
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_END"
                }
            }
            codeline
            {
                lineno=343
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=344
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#endif"
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*_OE_ENCLAVE_H*/"
                }
                highlight
                {
                    class=preprocessor
                }
            }
        }
        location
        {
            file=/root/openenclave/include/openenclave/enclave.h
        }
    }
}
