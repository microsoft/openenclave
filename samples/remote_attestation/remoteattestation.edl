// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

enclave {
    trusted {

        // Return the public key of this enclave along with the enclave's remote report.
        // Another enclave can use the remote report to attest the enclave and verify
        // the integrity of the public key.
        public int get_remote_report_with_pubkey(   [out] uint8_t **pem_key, 
                                                [out] size_t *key_size,
                                                [out] uint8_t **remote_report,
                                                [out] size_t  *remote_report_size);

        // Attest and store the public key of another enclave
        public int verify_report_and_set_pubkey(   [in, count=key_size] uint8_t *pem_key, 
                                                                  size_t key_size,
                                               [in, count=remote_report_size] uint8_t *remote_report,
                                               size_t   remote_report_size);

        // Create ephemeral symmetric key, encrypt using other enclave's public key
        // and sign using private key
        public int establish_secure_channel(  [out] uint8_t** data,
                                              [out] size_t*  size);

        // Verify signature, decrypt using private key
        // Send back symmetric key after encrypting using other enclave's public key
        // and sign using private key
        public int acknowledge_secure_channel(  [in, count=size] uint8_t* data,
                                               size_t  size);

        // Encrypt message for another enclave using the public key stored for it
        public int generate_encrypted_message(  [out] uint8_t** data,
                                              [out] size_t*  size);

        // Process encrypted message
        public int process_encrypted_msg(  [in, count=size] uint8_t* data,
                                               size_t  size);
    };

    //untrusted {
    //    no untrusted functions in this sample
    //};
};


