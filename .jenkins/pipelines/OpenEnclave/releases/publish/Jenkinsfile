// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

/*
This Pipeline will publish an OpenEnclave release from GitHub to public APT and NuGet repositories.
To publish a release:
1) PUBLISH_RELEASE should be set to true and 
2) OE_RELEASE_VERSION should be set to the release version you want to publish.

If PUBLISH_RELEASE is not set, the job will do a dry run.
*/

library "OpenEnclaveJenkinsLibrary@${params.OECI_LIB_VERSION}"


/**
 * Publish OpenEnclave Ubuntu packages to the Microsoft APT repository
 *
 * @param release_version  The version of the Open Enclave release to publish
 * @param os_release       The distribution version without "." (e.g. 1804)
 */

def ubuntuPublishRelease(String release_version, String os_release) {

    helpers.WaitForAptLock()
    withCredentials([file(credentialsId: 'azure-repoapi-client', variable: 'repoapiclient'),
                     file(credentialsId: "ubuntu-${os_release}-repo-config", variable: 'aptconfig'),
                     string(credentialsId: 'msft-apt-repo-pem', variable: 'repoclientpem')]) {
        sh '''#!/bin/bash
            set +x
            echo Ubuntu ${os_release}
            sudo apt-get update
            sudo apt-get -y --no-install-recommends install python3-adal jq

            if ! apt list --installed | grep azure-repoapi-client; then
                sudo apt -y install ${repoapiclient}
            fi

            # Install repoclient.pem
            if [[ -f ${WORKSPACE}/repoclient.pem ]]; then
                rm ${WORKSPACE}/repoclient.pem
            fi
            touch ~/.ssh/repoclient.pem
            chmod 600 ~/.ssh/repoclient.pem
            echo "${repoclientpem}" >> ${WORKSPACE}/repoclient.pem

            # Install repoclient configuration
            cp ${aptconfig} ${WORKSPACE}/apt-config.json
            chmod 600 ${WORKSPACE}/apt-config.json
            sed -i "s|<PEM_FILE>|$WORKSPACE/repoclient.pem|g" ${WORKSPACE}/apt-config.json
            chmod 600 ${WORKSPACE}/apt-config.json

            # Test repoclient
            repoclient -c ${WORKSPACE}/apt-config.json repo list
        '''
        script {
            // Download and publish open-enclave and open-enclave-hostverify packages if PUBLISH_RELEASE is true
            if (params.PUBLISH_RELEASE) {
                helpers.releaseDownloadLinux(release_version, "open-enclave", 'GitHub', 'Ubuntu', os_release)
                helpers.releaseDownloadLinux(release_version, "open-enclave-hostverify", 'GitHub', 'Ubuntu', os_release)
                sh """#!/bin/bash
                    echo "Publishing OpenEnclave ${release_version}"
                    mv "${release_version}/Ubuntu ${os_release}/Ubuntu_${os_release}_open-enclave_${release_version}_amd64.deb" open-enclave_${release_version}_amd64.deb
                    mv "${release_version}/Ubuntu ${os_release}/Ubuntu_${os_release}_open-enclave-hostverify_${release_version}_amd64.deb" open-enclave-hostverify_${release_version}_amd64.deb
                    repoclient -c ${WORKSPACE}/apt-config.json package add open-enclave_${release_version}_amd64.deb
                    repoclient -c ${WORKSPACE}/apt-config.json package add open-enclave-hostverify_${release_version}_amd64.deb
                """
            }
        }
        cleanWs()
    }
}

/**
 * Publish OpenEnclave Windows packages to NuGet
 *
 * @param release_version  The version of the Open Enclave release to publish
 */

def windowsPublishRelease(String release_version) {
    withCredentials([string(credentialsId: "openenclave-nuget-key", variable: "nugetkey")]) {
        def windows_version = bat(
            script: """
                @echo off
                wmic os get caption | find /v "Caption"
                """,
            returnStdout: true
        ).trim()

        script {
            if (params.PUBLISH_RELEASE) {
                helpers.releaseDownloadWindows(release_version, 'open-enclave', 'GitHub', windows_version)
                helpers.releaseDownloadWindows(release_version, 'open-enclave.OEHOSTVERIFY', 'GitHub', windows_version)
                powershell '''
                    nuget.exe update -self
                    nuget.exe push *.nupkg -ApiKey ${nugetkey} -Source "nuget.org"
                '''
            }
        }
    }
}

pipeline {
    agent any
    options {
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(
            logRotator(
                artifactNumToKeepStr: '3',
                numToKeepStr: '3'
            )
        )
    }
    parameters {
        booleanParam(name: "PUBLISH_RELEASE", defaultValue: false, description: "Publish to public repositories?")
        string(name: "OE_RELEASE_VERSION", description: "Open Enclave Release Version")
        string(name: "OECI_LIB_VERSION", defaultValue: 'master', description: 'Version of OE Libraries to use')
    }
    stages {
        stage('Publish Open Enclave Release') {
            parallel {
                stage('Publish Ubuntu 20.04') { steps { node('nonsgx-ubuntu-2004') { ubuntuPublishRelease(OE_RELEASE_VERSION, '2004') } }}
                stage('Publish Ubuntu 18.04') { steps { node('nonsgx-ubuntu-1804') { ubuntuPublishRelease(OE_RELEASE_VERSION, '1804') } }}
                stage('Publish Windows 2019') { steps { node('nonsgx-windows') { windowsPublishRelease(OE_RELEASE_VERSION) } }}
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
