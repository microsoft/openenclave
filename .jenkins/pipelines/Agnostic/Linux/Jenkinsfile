// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

library "OpenEnclaveJenkinsLibrary@${params.OECI_LIB_VERSION}"
GLOBAL_ERROR = globalvars.GLOBAL_ERROR

try{
    def testing_stages = [
        "Check CI":                                { tests.checkCI('clang-11', params.PULL_REQUEST_ID) },
        "Check Developer Experience Ubuntu 20.04": { tests.checkDevFlows('20.04', 'clang-11', params.PULL_REQUEST_ID) },
        "AArch64 2004 GNU gcc Debug":              { tests.AArch64GNUTest('20.04', 'Debug', params.PULL_REQUEST_ID) },
        "AArch64 2004 GNU gcc RelWithDebInfo":     { tests.AArch64GNUTest('20.04', 'RelWithDebInfo', params.PULL_REQUEST_ID) },
        "Ubuntu 2004 Cross Platform Build":        { tests.buildCrossPlatform("20.04", 'clang-11', params.PULL_REQUEST_ID) }
    ]
    if(FULL_TEST_SUITE == "true") {
        stage("Full Test Suite") {
            testing_stages += [
                "Sim 2004 clang-11 SGX1 RelWithDebInfo":             { tests.simulationContainerTest('20.04', 'RelWithDebInfo', 'clang-11', ['-DHAS_QUOTE_PROVIDER=OFF', '-DLVI_MITIGATION=None', '-DLVI_MITIGATION_SKIP_TESTS=OFF'], params.PULL_REQUEST_ID) },
                "Sim 2004 clang-11 SGX1FLC RelWithDebInfo":          { tests.simulationContainerTest('20.04', 'RelWithDebInfo', 'clang-11', ['-DHAS_QUOTE_PROVIDER=ON',  '-DLVI_MITIGATION=None', '-DLVI_MITIGATION_SKIP_TESTS=OFF'], params.PULL_REQUEST_ID) },
                "Sim 2004 clang-11 SGX1FLC Debug snmalloc":          { tests.simulationContainerTest('20.04', 'Debug',          'clang-11', ['-DHAS_QUOTE_PROVIDER=ON',  '-DLVI_MITIGATION=None', '-DLVI_MITIGATION_SKIP_TESTS=OFF', '-DUSE_SNMALLOC=ON'], params.PULL_REQUEST_ID) },
                "Sim 2004 clang-11 SGX1FLC RelWithDebInfo snmalloc": { tests.simulationContainerTest('20.04', 'RelWithDebInfo', 'clang-11', ['-DHAS_QUOTE_PROVIDER=ON',  '-DLVI_MITIGATION=None', '-DLVI_MITIGATION_SKIP_TESTS=OFF', '-DUSE_SNMALLOC=ON'], params.PULL_REQUEST_ID) }
            ]
            parallel testing_stages
        }
    } else {
        stage("PR Testing") {
            testing_stages += [
                "Sim 2004 clang-11 SGX1FLC RelWithDebInfo":          { tests.simulationContainerTest('20.04', 'RelWithDebInfo', 'clang-11', ['-DHAS_QUOTE_PROVIDER=ON',  '-DLVI_MITIGATION=None', '-DLVI_MITIGATION_SKIP_TESTS=ON'], params.PULL_REQUEST_ID) },
                "Sim 2004 clang-11 SGX1FLC RelWithDebInfo snmalloc": { tests.simulationContainerTest('20.04', 'RelWithDebInfo', 'clang-11', ['-DHAS_QUOTE_PROVIDER=ON',  '-DLVI_MITIGATION=None', '-DLVI_MITIGATION_SKIP_TESTS=ON', '-DUSE_SNMALLOC=ON'], params.PULL_REQUEST_ID) }
            ]
            parallel testing_stages
        }
    }
} catch(Exception e) {
    println "Caught global pipeline exception: " + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
}
