// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

library "OpenEnclaveJenkinsLibrary@${params.OECI_LIB_VERSION}"
GLOBAL_ERROR = globalvars.GLOBAL_ERROR
globalvars.CTEST_TIMEOUT_SECONDS = 1200

properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '90',
                artifactNumToKeepStr: '180',
                daysToKeepStr: '90',
                numToKeepStr: '180'
            )
        ),
        [$class: 'JobRestrictionProperty'],
        parameters(
            [
                string(name: 'REPOSITORY_NAME',                defaultValue: 'openenclave/openenclave', description: 'GitHub repository to build.'),
                string(name: 'BRANCH_NAME',                    defaultValue: 'master',                  description: 'Git branch to build.'),
                string(name: 'DOCKER_TAG',                     defaultValue: 'latest',                  description: 'Tag used to pull oetools docker image.'),
                string(name: 'OECI_LIB_VERSION',               defaultValue: 'master',                  description: 'Version of OE Libraries to use'),
                string(name: 'WINDOWS_2019_CUSTOM_LABEL',      defaultValue: '',                        description: '[Optional] Jenkins agent label to use for Windows Server 2019'),
                string(name: 'WINDOWS_2019_DCAP_CUSTOM_LABEL', defaultValue: '',                        description: '[Optional] Jenkins agent label to use for Windows Server 2019 with DCAP'),
                string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL',     defaultValue: '',                        description: '[Optional] Jenkins agent label to use for Ubuntu 20.04 without SGX.'),
                booleanParam(name: 'FULL_TEST_SUITE',          defaultValue: false,                     description: 'Run all additional tests available in the test suite.')
            ]
        )
    ]
)

try{
    common.emailJobStatus('STARTED')
    def testing_stages = [ "Windows 2019 Install Prerequisites Verification" : { tests.windowsPrereqsVerify("acc-win2019-dcap") }]
    if(FULL_TEST_SUITE == "true") {
        stage("Full Test Suite") {
            testing_stages += [
                "Win2019 Ubuntu2004 clang-10 Debug Linux-Elf-build":              { tests.windowsLinuxElfBuild('acc-win2019-dcap', '20.04', 'clang-10', 'Debug') },
                "Win2019 Ubuntu2004 clang-10 RelWithDebInfo Linux-Elf-build":     { tests.windowsLinuxElfBuild('acc-win2019-dcap', '20.04', 'clang-10', 'RelWithDebInfo') },
                "Win2019 Ubuntu2004 clang-10 Debug Linux-Elf-build LVI":          { tests.windowsLinuxElfBuild('acc-win2019-dcap', '20.04', 'clang-10', 'Debug', 'ControlFlow') },
                "Win2019 Ubuntu2004 clang-10 RelWithDebInfo Linux-Elf-build LVI": { tests.windowsLinuxElfBuild('acc-win2019-dcap', '20.04', 'clang-10', 'RelWithDebInfo', 'ControlFlow') },
                "Win2019 Ubuntu1804 clang-10 Debug Linux-Elf-build":              { tests.windowsLinuxElfBuild('acc-win2019-dcap', '18.04', 'clang-10', 'Debug') },
                "Win2019 Ubuntu1804 clang-10 RelWithDebInfo Linux-Elf-build":     { tests.windowsLinuxElfBuild('acc-win2019-dcap', '18.04', 'clang-10', 'RelWithDebInfo') },
                "Win2019 Ubuntu1804 clang-10 Debug Linux-Elf-build LVI":          { tests.windowsLinuxElfBuild('acc-win2019-dcap', '18.04', 'clang-10', 'Debug', 'ControlFlow') },
                "Win2019 Ubuntu1804 clang-10 RelWithDebInfo Linux-Elf-build LVI": { tests.windowsLinuxElfBuild('acc-win2019-dcap', '18.04', 'clang-10', 'RelWithDebInfo', 'ControlFlow') },
                "Win2019 Sim Debug Cross Compile":                                { tests.windowsCrossCompile('acc-win2019', 'Debug',          'None',        '1') },
                "Win2019 Sim RelWithDebInfo Cross Compile":                       { tests.windowsCrossCompile('acc-win2019', 'RelWithDebInfo', 'None',        '1') },
                "Win2019 Sim Debug Cross Compile LVI ":                           { tests.windowsCrossCompile('acc-win2019', 'Debug',          'ControlFlow', '1') },
                "Win2019 Sim RelWithDebInfo Cross Compile LVI ":                  { tests.windowsCrossCompile('acc-win2019', 'RelWithDebInfo', 'ControlFlow', '1') },
                "Win2019 Debug Cross Compile with DCAP libs":                     { tests.windowsCrossCompile('acc-win2019', 'Debug') },
                "Win2019 RelWithDebInfo Cross Compile with DCAP libs":            { tests.windowsCrossCompile('acc-win2019', 'RelWithDebInfo') },
                "Win2019 Debug Cross Compile DCAP LVI":                           { tests.windowsCrossCompile('acc-win2019', 'Debug',          'ControlFlow') },
                "Win2019 RelWithDebInfo Cross Compile DCAP LVI":                  { tests.windowsCrossCompile('acc-win2019', 'RelWithDebInfo', 'ControlFlow') },
                "Win2019ICX RelWithDebInfo Cross Compile DCAP LVI":               { tests.windowsCrossCompile('acc-v3-win2019', 'RelWithDebInfo', 'ControlFlow') },
                "Win2019 Sim Debug Cross Compile LVI snmalloc":                   { tests.windowsCrossCompile('acc-win2019', 'Debug',          'ControlFlow', '1', 'OFF', ['-DUSE_SNMALLOC=ON']) },
                "Win2019 RelWithDebInfo Cross Compile DCAP LVI snmalloc":         { tests.windowsCrossCompile('acc-win2019', 'RelWithDebInfo', 'ControlFlow', '0', 'OFF', ['-DUSE_SNMALLOC=ON']) },
                "Win2019 Cross Platform":                                         { tests.windowsCrossPlatform('acc-win2019-dcap') }
            ]
            parallel testing_stages
        }
    } else {
        stage("PR Testing") {
            testing_stages += [
                "Win2019 Ubuntu1804 clang-10 RelWithDebInfo Linux-Elf-build LVI":    { tests.windowsLinuxElfBuild('acc-win2019-dcap', '18.04', 'clang-10', 'RelWithDebInfo', 'ControlFlow', 'ON') },
                "Win2019 Sim RelWithDebInfo Cross Compile LVI ":                     { tests.windowsCrossCompile('acc-win2019', 'RelWithDebInfo', 'ControlFlow', '1', 'ON') },
                "Win2019 Debug Cross Compile DCAP LVI":                              { tests.windowsCrossCompile('acc-win2019', 'Debug',          'ControlFlow', '0', 'ON') },
                "Win2019 RelWithDebInfo Cross Compile DCAP LVI FULL Tests":          { tests.windowsCrossCompile('acc-win2019', 'RelWithDebInfo', 'ControlFlow') },
                "Win2019 RelWithDebInfo Cross Compile DCAP LVI FULL Tests snmalloc": { tests.windowsCrossCompile('acc-win2019', 'RelWithDebInfo', 'ControlFlow', '0', 'OFF', ['-DUSE_SNMALLOC=ON']) }
            ]
            parallel testing_stages
        }
    }
} catch(Exception e) {
    println "Caught global pipeline exception: " + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
    common.emailJobStatus(currentBuild.result)
}
