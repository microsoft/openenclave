# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

#!/bin/bash

##====================================================================================
##
## This script fires OE build and test for specified build-type, platform and
## simulator/hardware mode.
## Default run with no parameters builds with Debug build-type and for SGX1
## platform and will test in Simulator mode.
## Run this from the root of the source tree as sudo.
##
##====================================================================================
if [ "$1" == "-h" ]; then
   echo "Script to fire OE build and test with specified platform/build-type/test mode" 
   echo "$0: "
   echo "Script to fire OE build and test for specified build-type, platform & test mode"
   echo " Usage:  sudo ./scripts/build-testall [-d]|[-p <platform-type>]|-b [build-type]"
   echo "           -d or --disable_sim to Disable Simulator Test Mode"
   echo "           -p SGX1FLC or -p=SGX1FLC to build for SGX1FLC platform"
   echo "           -b Debug|RelWithDebInfo|Release or -b=Debug|RelWithDebInfo|Release"
   echo "           -h Display usage and exit"
   echo " Default is to build for SGX1 platform, Debug Build type & test in simulator mode"
   echo ""
   exit 0
fi

#Default values for the arguments
#Disable Simulator test mode to run on SGX hardware. 
#Default test mode is Simulator, disable Simulator test mode with -d or --disable_sim 
DISABLE_SIM=0
#Valid PLATFORM_MODE values are SGX1 or SGX1FLC
PLATFORM_MODE="SGX1"
#Valid BUILDTYPE values are Debug|Release|RelWithDebInfo
BUILD_TYPE="DEBUG"
##TBD - These are not supported parameters at this time.
#Enable full Libc tests. Default is disabled, enable with setting to "On" or "1"
ENABLE_LIBC_TESTS="OFF"
#Enable full Libcxx tests. Default is disabled, enable with setting to "On" or "0"
ENABLE_LIBCXX_TESTS="OFF"

#Parse the command line - keep looping as long as there is at least one more argument
while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
        # This is a flag type option. Will catch either -d or --disable_sim
        -d|--disable_sim)
        DISABLE_SIM=1
        ;;
        # This is an arg value type option. Will catch -p value or --platform_mode value
        -p|--platform_mode)
        shift # past the key and to the value
        PLATFORM_MODE="$1"
        ;;
        # This is an arg=value type option. Will catch -p=value or --platform_mode=value
        -p=*|--platform_mode=*)
        # No need to shift here since the value is part of the same string
        PLATFORM_MODE="${key#*=}"
        ;;
        # This is an arg value type option. Will catch -b value or --build_type value
        -b|--build_type)
        shift # past the key and to the value
        BUILD_TYPE="$1"
        ;;
        # This is an arg=value type option. Will catch -b=value or --build_type=value
        -b=*|--build_type=*)
        # No need to shift here since the value is part of the same string
        BUILD_TYPE="${key#*=}"
        ;;
        *)
        echo "Unknown option '$key'"
        ;;
    esac
    # Shift after checking all the cases to get the next option
    shift
done

echo "DISABLE SIMULATOR MODE = ${DISABLE_SIM}"
PLATFORM_MODE=`echo $PLATFORM_MODE|tr '[a-z]' '[A-Z]'`
echo "PLATFORM MODE  = ${PLATFORM_MODE}"
BUILD_TYPE=`echo $BUILD_TYPE|tr '[a-z]' '[A-Z]'`
echo "BUILD_TYPE  = ${BUILD_TYPE}"

#Check if the parameter values are correct
if [[ ${PLATFORM_MODE} != "SGX1" && ${PLATFORM_MODE} != "SGX1FLC" ]]; then
   echo "Invalid value for ${PLATFORM_MODE} "
   exit 1
fi

if [[ ${BUILD_TYPE} != "DEBUG" && ${BUILD_TYPE} != "RELEASE" && ${BUILD_TYPE} != "RELWITHDEBINFO" ]]; then
   echo "Invalid value for ${BUILD_TYPE} "
   exit 1
fi

if [ ${PLATFORM_MODE} == "SGX1FLC" ]; then
   sudo make -C prereqs USE_LIBSGX=1 NODOWNLOAD=1
elif [ ${DISABLE_SIM} == 0 ]; then
   sudo make -C prereqs
fi

mkdir build
cd build

CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
if [ ${PLATFORM_MODE} == "SGX1FLC" ]; then
   CMAKE_FLAGS="${CMAKE_FLAGS} -DUSE_LIBSGX=1"
fi
echo "CMAKE_FLAGS are ${CMAKE_FLAGS}"

cmake .. ${CMAKE_FLAGS}
if [ "$?" != "0" ]; then
    echo ""
    echo "cmake failed for ${PLATFORM_MODE}"
    echo ""
    exit 1
fi

make
if [ "$?" != "0" ]; then
    echo ""
    echo "Build failed for ${PLATFORM_MODE}"
    echo ""
    exit 1
fi

#Finally run the tests in Simulator mode or on Hardware
if [ ${DISABLE_SIM} != 1 ]; then
   OE_SIMULATION=1 ctest
else
   ctest
fi

if [ "$?" != "0" ]; then
    echo ""
    echo "Test failed for ${PLATFORM_MODE} ${BUILD_TYPE} in simulation mode"
    echo ""
    exit 1
fi





