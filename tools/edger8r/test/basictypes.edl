/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
 /* 
 * Basic Types: void, char, wchar_t, short, int, 
 *              float, double, long, size_t, unsigned,
 *              int8_t, int16_t, int32_t, int64_t,
 *              uint8_t, uint16_t, uint32_t, uint64_t,
 *
 * Keywords: [size],[count]
 *
 */
enclave  {

    trusted {
        public void         ecall_basic();
        public void*        ecall_basic_0();
        public void*        ecall_basic_1(void);
        public void*        ecall_basic_2([in, out, size=1024, count=1024] void* p);
        public char*        ecall_basic_3(char        v, [in, size=1024]   char *p);
        public short*       ecall_basic_4(short       v, [out, size=1024]  short *p);
        public int*         ecall_basic_5(int         v, [in, out, size=v] int *p);
        public long*        ecall_basic_6(long        v, [user_check]      long *p);
        public long long*   ecall_basic_7(long long   v, [in]        const long long *p);
        public long double* ecall_basic_8(long double v, [in,out,count=10] long double *p);
        public float*       ecall_basic_9(float       v, [out, count=10]   float *p);
        public double*      ecall_basic_10(double     v, [in]        const double *p);
        public size_t*      ecall_basic_11(size_t     v, [in, out, size=v] size_t *p);

        public unsigned           ecall_basic_13(unsigned           v, [user_check] unsigned           *p);
        public unsigned char      ecall_basic_14(unsigned char      v, [user_check] unsigned char      *p);
        public unsigned short     ecall_basic_16(unsigned short     v, [user_check] unsigned short     *p);
        public unsigned int       ecall_basic_17(unsigned int       v, [user_check] unsigned int       *p);
        public unsigned long      ecall_basic_20(unsigned long      v, [user_check] unsigned long      *p);
        public unsigned long long ecall_basic_21(unsigned long long v, [user_check] unsigned long long *p);

        public int8_t   ecall_basic_23(int8_t  v, [user_check] int8_t *p);
        public int16_t  ecall_basic_24(int16_t v, [user_check] int16_t *p);
        public int32_t  ecall_basic_25(int32_t v, [user_check] int32_t *p);
        public int64_t  ecall_basic_26(int64_t v, [user_check] int64_t *p);

        public uint8_t  ecall_basic_27(uint8_t  v, [user_check] uint8_t *p);
        public uint16_t ecall_basic_28(uint16_t v, [user_check] uint16_t *p);
        public uint32_t ecall_basic_29(uint32_t v, [user_check] uint32_t *p);
        public uint64_t ecall_basic_30(uint64_t v, [user_check] uint64_t *p);

        public void ecall_len_2([out, count = len] char* dst, [in, count = len] const char* src, size_t len);

        /* invalid syntax */

        /* duplicated [size],[count] */

        // public void ecall_len_1([out, size = len, size = 1024] char* dst, [in, size = 512, size = len] const char* src, size_t len);
        // Edger8r: error: duplicated attribute: `size'

        // public void ecall_len_3([out, count = len, count = 1024] char* dst, [in, count = 512, count = len] const char* src, size_t len);
        // Edger8r: error: duplicated attribute: `count'

        /* [string] cannot be used for 'wchar_t*' type */
        // public wchar_t* ecall_basic_12(wchar_t v, [in, string] wchar_t *p);
        // Edger8r: error: `ecall_basic_12': invalid 'string' attribute - `p' is not char pointer.

    };

    untrusted {
        void         ocall_basic();
        void*        ocall_basic_0();
        void*        ocall_basic_1(void);
        void*        ocall_basic_2([in, out, size=1024, count=1024] void* p);
        char*        ocall_basic_3(char        v, [in, size=1024]   char *p);
        short*       ocall_basic_4(short       v, [out, size=1024]  short *p);
        int*         ocall_basic_5(int         v, [in, out, size=v] int *p);
        long*        ocall_basic_6(long        v, [user_check]      long *p);
        long long*   ocall_basic_7(long long   v, [in]     const    long long *p);
        long double* ocall_basic_8(long double v, [in,out,count=10] long double *p);
        float*       ocall_basic_9(float       v, [out, count=10]   float *p);
        double*      ocall_basic_10(double     v, [in]        const double *p);
        size_t*      ocall_basic_11(size_t     v, [in, out, size=v] size_t *p);

        unsigned           ocall_basic_13(unsigned           v, [user_check] unsigned           *p);
        unsigned char      ocall_basic_14(unsigned char      v, [user_check] unsigned char      *p);
        unsigned short     ocall_basic_16(unsigned short     v, [user_check] unsigned short     *p);
        unsigned int       ocall_basic_17(unsigned int       v, [user_check] unsigned int       *p);
        unsigned long      ocall_basic_20(unsigned long      v, [user_check] unsigned long      *p);
        unsigned long long ocall_basic_21(unsigned long long v, [user_check] unsigned long long *p);

        int8_t   ocall_basic_23(int8_t  v, [user_check] int8_t *p);
        int16_t  ocall_basic_24(int16_t v, [user_check] int16_t *p);
        int32_t  ocall_basic_25(int32_t v, [user_check] int32_t *p);
        int64_t  ocall_basic_26(int64_t v, [user_check] int64_t *p);

        uint8_t  ocall_basic_27(uint8_t  v, [user_check] uint8_t *p);
        uint16_t ocall_basic_28(uint16_t v, [user_check] uint16_t *p);
        uint32_t ocall_basic_29(uint32_t v, [user_check] uint32_t *p);
        uint64_t ocall_basic_30(uint64_t v, [user_check] uint64_t *p);

        void ocall_len_2([out, count = len] char* dst, [in, count = len] const char* src, size_t len);

        /* invalid syntax */

        /* duplicated [size],[count] */

        // void ocall_len_1([out, size = len, size = 1024] char* dst, [in, size = 512, size = len] const char* src, size_t len);
        // Edger8r: error: duplicated attribute: `size'

        // void ocall_len_3([out, count = len, count = 1024] char* dst, [in, count = 512, count = len] const char* src, size_t len);
        // Edger8r: error: duplicated attribute: `count'

        /* [string] cannot be used for 'wchar_t*' type */
        // wchar_t* ocall_basic_12(wchar_t v, [in, string] wchar_t *p);
        // Edger8r: error: `ocall_basic_12': invalid 'string' attribute - `p' is not char pointer.

    };

};
