/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
 /*
 * Keywords: [cdecl],[stdcall],[fastcall],[dllimport]
 *           [propagate_errno]
 *
 */

enclave {
    untrusted {
        [stdcall]   int ocall_conv_1(void);
        [fastcall]  int ocall_conv_2(void);
        [cdecl]     int ocall_conv_3(void);

        [dllimport] int ocall_conv_4(void);

        [dllimport, stdcall]  int ocall_conv_5(void);
        [dllimport, fastcall] int ocall_conv_6(void);
        [dllimport, cdecl]    int ocall_conv_7(void);

        void * ocall_fopen([in,string] const char * filename, [in,string] const char * mode) propagate_errno;
        int    ocall_fclose([user_check] void * stream) propagate_errno;
        size_t ocall_fwrite([in, size=size, count=count] const void * buffer,size_t size,size_t count,[user_check]void * stream) propagate_errno;
    };
	
    trusted {
        public int ecall_foo();
    };
};
