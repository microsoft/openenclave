/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
 /*
 * Keywords: isptr, isary, readonly 
 * 
 * Combination: [in], [out], [int, out], [user_check], const, [size], [count]
 *              [string], [wstring]
 * 
 */
enclave {
    include "userdata.h"

    trusted {
        public MyArray* ecall_user_data([in, isptr] pMyStruct p1,
                                   [out, isptr] pMyStruct p2,
                                   [in, isptr, readonly, count=cnt3] pZMyStruct p3, size_t cnt3,
                                   [in, out, isptr, size=10, count=2] pMyStruct p4,
                                   [user_check, isptr] pMyStruct p5,
                                   [isary, user_check] MyArray arr1,
                                   [isary, in] MyArray arr2,
                                   [isary, out] MyArray arr4,
                                   [isary, in, out] MyArray arr3);

        public int ecall_user_data_1([in] MyStruct* ptr);
        public int ecall_user_data_2(pMyStruct ptr);
        public int ecall_user_data_3(MyEnum ptr);
        public int ecall_user_data_4([in] const MyStruct* ptr);
        public int ecall_user_data_5([user_check] MyStruct* ptr);

        /* isptr */
        public int ecall_isptr_1([isptr, user_check]    pMyStruct ptr);
        public int ecall_isptr_2([isptr, in]            pMyStruct ptr);
        public int ecall_isptr_3([isptr, out]           pMyStruct ptr);
        public int ecall_isptr_4([isptr, in, out]       pMyStruct ptr);
        public int ecall_isptr_5([isptr, in, count=cnt] pMyStruct ptr, size_t cnt);
        public int ecall_isptr_6([isptr, out, size=len] pMyBuf ptr, size_t len);
        public int ecall_isptr_7([isptr, in, out, size=len, count=cnt] pMyBuf ptr, size_t len, size_t cnt);
        public int ecall_isptr_8([isptr, in, size=len]  pMyStruct ptr, size_t len);

        /* isary */
        public int ecall_isary_1([isary, user_check]   MyArray ptr);
        public int ecall_isary_2([isary, in]           MyArray ptr);
        public int ecall_isary_3([isary, out]          MyArray ptr);
        public int ecall_isary_4([isary, in, out]      MyArray ptr);

        /* readonly */

        /* ecall_readonly_1 reports build warnings, because:                    */
        /* [readonly] is not declared for a foreign type with 'const' qualifier */
        /* public int ecall_readonly_1([isptr, in] pZMyStruct ptr);             */

        public int ecall_readonly_2([isptr, readonly, user_check]   pZMyStruct ptr);
        public int ecall_readonly_3([isptr, readonly, in]           pZMyStruct ptr);
        public int ecall_readonly_4([isptr, readonly, in, size=len] pZMyBuf ptr, size_t len);

        /* invalid syntax */
        /* ------------------------------------------------------------------ */
        /* [isptr][isary] cannot be used for exlicitly declared pointer/array */
        /* ------------------------------------------------------------------ */
        // public int ecall_isptr_10([isptr, in, out] pMyStruct ptr[10]);
        // Edger8r: error: `ecall_isptr_10': Pointer array not allowed - `ptr' is a pointer array.

        // public int ecall_isptr_11([isptr, in] pMyStruct ptr[10][2]);
        // Edger8r: error: `ecall_isptr_11': Pointer array not allowed - `ptr' is a pointer array.

        // public int ecall_isptr_12([isptr, out] pMyStruct *ptr);
        // Edger8r: error: 'isptr', attributes are only for user defined type, not for `pMyStruct*'.

        // public int ecall_isptr_13([isptr, in] pMyStruct **ptr);
        // Edger8r: error: 'isptr', attributes are only for user defined type, not for `pMyStruct**'.

        // public int ecall_isary_5([isary, in, out] MyArray ptr[10]);
        // Edger8r: error: `ecall_isary_5': invalid 'isary' attribute - `ptr' is explicitly declared array.

        // public int ecall_isary_6([isary, out] MyArray ptr[10][2]);
        // Edger8r: error: `ecall_isary_6': invalid 'isary' attribute - `ptr' is explicitly declared array.

        // public int ecall_isary_7([isary, in, out] MyArray *ptr);
        // Edger8r: error: 'isary', attributes are only for user defined type, not for `MyArray*'.

        // public int ecall_isary_8([isary, in] MyArray **ptr);
        // Edger8r: error: 'isary', attributes are only for user defined type, not for `MyArray**'.

        // public int ecall_readonly_8([isptr, readonly, in] pZMyStruct ptr[10]);
        // Edger8r: error: `ecall_readonly_8': Pointer array not allowed - `ptr' is a pointer array.

        // public int ecall_readonly_9([isptr, readonly, in] pZMyStruct *ptr);
        // Edger8r: error: 'isptr', attributes are only for user defined type, not for `pZMyStruct*'.

        // public int ecall_readonly_10([isary, readonly, in] MyArray ptr[10]);
        // Edger8r: error: 'readonly' attribute is only used with 'isptr' attribute.

        // public int ecall_readonly_11([isary, readonly, in] MyArray *ptr);
        // Edger8r: error: 'isary', attributes are only for user defined type, not for `MyArray*'.

        /* -----------------------------------------*/
        /* [readonly] can only be used with [isptr] */
        /* 'const' can be used for pointer type     */
        /* -----------------------------------------*/
        // public int ecall_readonly_6([isary, readonly, user_check] MyArray ptr);
        // Edger8r: error: 'readonly' attribute is only used with 'isptr' attribute.

        // public int ecall_readonly_7([isary, readonly, in] MyArray ptr);
        // Edger8r: error: 'readonly' attribute is only used with 'isptr' attribute.

        // public int ecall_user_data_6([readonly] pZMyStruct ptr);
        // Edger8r: error: pointer/array should have direction attribute or `user_check'

        // public int ecall_user_data_7(const MyEnum ptr);
        // Edger8r: error: tmp.edl:4:45: unexpected token: ptr

        // public int ecall_isptr_15([isptr, in] const pMyStruct ptr);
        // Edger8r: error: tmp.edl:4:57: unexpected token: ptr

        /* ------------------------------------------*/
        /* [size][count] cannot be used with [isary] */
        /* ------------------------------------------*/
        // public int ecall_isptr_9 ([isary, in, count=cnt] MyArray ptr, size_t cnt);
        // Edger8r: error: Pointer size attributes cannot be used with foreign array

        // public int ecall_isptr_10([isary, out, size=len] MyArray ptr, size_t len);
        // Edger8r: error: Pointer size attributes cannot be used with foreign array

        // public int ecall_isptr_11([isary, in, out, size=len, count=cnt] MyArray ptr, size_t len, size_t cnt);
        // Edger8r: error: Pointer size attributes cannot be used with foreign array

        // public int ecall_isptr_12([isary, in, size=len] MyArray ptr, size_t len);
        // Edger8r: error: Pointer size attributes cannot be used with foreign array

        /* -----------------------------------------------*/
        /* [size][count] cannot be used with [user_check] */
        /* -----------------------------------------------*/
        // public int ecall_isptr_14([isptr, user_check, size=len] pMyStruct ptr, size_t len);
        // Edger8r: error: size/string attributes must be used with pointer direction

        // public int ecall_readonly_5([isptr, readonly, user_check, count=cnt] pZMyBuf ptr, size_t cnt);
        // Edger8r: error: size/string attributes must be used with pointer direction

        /* ------------------------------------------------------------------*/
        /* [string] [wstring] attribute cannot be used for user defined type */
        /* ------------------------------------------------------------------*/

        // public int ecall_isptr_9([isptr, in, string] pMyStruct ptr, [isptr, in, wstring] pMyStruct p2);
        // Edger8r: error: `ecall_isptr_9': invalid 'string' attribute - `ptr' is not char pointer.

    };

    untrusted {
        MyArray* ocall_user_data([in, isptr] pMyStruct p1,
                                [out, isptr] pMyStruct p2,
                                [in, isptr, readonly, count=cnt3] pZMyStruct p3, size_t cnt3,
                                [in, out, isptr, size=10, count=2] pMyStruct p4,
                                [user_check, isptr] pMyStruct p5,
                                [isary, user_check] MyArray arr1,
                                [isary, in] MyArray arr2,
                                [isary, out] MyArray arr4,
                                [isary, in, out] MyArray arr3);

        int ocall_user_data_1([in] MyStruct* ptr);
        int ocall_user_data_2(pMyStruct ptr);
        int ocall_user_data_3(MyEnum ptr);
        int ocall_user_data_4([in] const MyStruct* ptr);
        int ocall_user_data_5([user_check] MyStruct* ptr);

        /* isptr */
        int ocall_isptr_1([isptr, user_check]    pMyStruct ptr);
        int ocall_isptr_2([isptr, in]            pMyStruct ptr);
        int ocall_isptr_3([isptr, out]           pMyStruct ptr);
        int ocall_isptr_4([isptr, in, out]       pMyStruct ptr);
        int ocall_isptr_5([isptr, in, count=cnt] pMyStruct ptr, size_t cnt);
        int ocall_isptr_6([isptr, out, size=len] pMyBuf ptr, size_t len);
        int ocall_isptr_7([isptr, in, out, size=len, count=cnt] pMyBuf ptr, size_t len, size_t cnt);
        int ocall_isptr_8([isptr, in, size=len]  pMyStruct ptr, size_t len);

        /* isary */
        int ocall_isary_1([isary, user_check]   MyArray ptr);
        int ocall_isary_2([isary, in]           MyArray ptr);
        int ocall_isary_3([isary, out]          MyArray ptr);
        int ocall_isary_4([isary, in, out]      MyArray ptr);

        /* readonly */
        /* ocall_readonly_1([isptr, in] pZMyStruct ptr); */

        int ocall_readonly_2([isptr, readonly, user_check]   pZMyStruct ptr);
        int ocall_readonly_3([isptr, readonly, in]           pZMyStruct ptr);
        int ocall_readonly_4([isptr, readonly, in, size=len] pZMyBuf ptr, size_t len);

        /* invalid syntax */
        /* ------------------------------------------------------------------ */
        /* [isptr][isary] cannot be used for exlicitly declared pointer/array */
        /* ------------------------------------------------------------------ */
        // int ocall_isptr_10([isptr, in, out] pMyStruct ptr[10]);
        // Edger8r: error: `ocall_isptr_10': Pointer array not allowed - `ptr' is a pointer array.

        // int ocall_isptr_11([isptr, in] pMyStruct ptr[10][2]);
        // Edger8r: error: `ocall_isptr_11': Pointer array not allowed - `ptr' is a pointer array.

        // int ocall_isptr_12([isptr, out] pMyStruct *ptr);
        // Edger8r: error: 'isptr', attributes are only for user defined type, not for `pMyStruct*'.

        // int ocall_isptr_13([isptr, in] pMyStruct **ptr);
        // Edger8r: error: 'isptr', attributes are only for user defined type, not for `pMyStruct**'.

        // int ocall_isary_5([isary, in, out] MyArray ptr[10]);
        // Edger8r: error: `ocall_isary_5': invalid 'isary' attribute - `ptr' is explicitly declared array.

        // int ocall_isary_6([isary, out] MyArray ptr[10][2]);
        // Edger8r: error: `ocall_isary_6': invalid 'isary' attribute - `ptr' is explicitly declared array.

        // int ocall_isary_7([isary, in, out] MyArray *ptr);
        // Edger8r: error: 'isary', attributes are only for user defined type, not for `MyArray*'.

        // int ocall_isary_8([isary, in] MyArray **ptr);
        // Edger8r: error: 'isary', attributes are only for user defined type, not for `MyArray**'.

        // int ocall_readonly_8([isptr, readonly, in] pZMyStruct ptr[10]);
        // Edger8r: error: `ocall_readonly_8': Pointer array not allowed - `ptr' is a pointer array.

        // int ocall_readonly_9([isptr, readonly, in] pZMyStruct *ptr);
        // Edger8r: error: 'isptr', attributes are only for user defined type, not for `pZMyStruct*'.

        // int ocall_readonly_10([isary, readonly, in] MyArray ptr[10]);
        // Edger8r: error: 'readonly' attribute is only used with 'isptr' attribute.

        // int ocall_readonly_11([isary, readonly, in] MyArray *ptr);
        // Edger8r: error: 'isary', attributes are only for user defined type, not for `MyArray*'.

        /* -----------------------------------------*/
        /* [readonly] can only be used with [isptr] */
        /* 'const' can be used for pointer type     */
        /* -----------------------------------------*/
        // int ocall_readonly_6([isary, readonly, user_check] MyArray ptr);
        // Edger8r: error: 'readonly' attribute is only used with 'isptr' attribute.

        // int ocall_readonly_7([isary, readonly, in] MyArray ptr);
        // Edger8r: error: 'readonly' attribute is only used with 'isptr' attribute.

        // int ocall_user_data_6([readonly] pZMyStruct ptr);
        // Edger8r: error: pointer/array should have direction attribute or `user_check'

        // int ocall_user_data_7(const MyEnum ptr);
        // Edger8r: error: tmp.edl:7:38: unexpected token: ptr

        // int ocall_isptr_15([isptr, in] const pMyStruct ptr);
        // Edger8r: error: tmp.edl:7:50: unexpected token: ptr

        /* ------------------------------------------*/
        /* [size][count] cannot be used with [isary] */
        /* ------------------------------------------*/
        // int ocall_isptr_9 ([isary, in, count=cnt] MyArray ptr, size_t cnt);
        // Edger8r: error: Pointer size attributes cannot be used with foreign array

        // int ocall_isptr_10([isary, out, size=len] MyArray ptr, size_t len);
        // Edger8r: error: Pointer size attributes cannot be used with foreign array

        // int ocall_isptr_11([isary, in, out, size=len, count=cnt] MyArray ptr, size_t len, size_t cnt);
        // Edger8r: error: Pointer size attributes cannot be used with foreign array

        // int ocall_isptr_12([isary, in, size=len] MyArray ptr, size_t len);
        // Edger8r: error: Pointer size attributes cannot be used with foreign array

        /* -----------------------------------------------*/
        /* [size][count] cannot be used with [user_check] */
        /* -----------------------------------------------*/
        // int ocall_isptr_14([isptr, user_check, size=len] pMyStruct ptr, size_t len);
        // Edger8r: error: size/string attributes must be used with pointer direction

        // int ocall_readonly_5([isptr, readonly, user_check, count=cnt] pZMyBuf ptr, size_t cnt);
        // Edger8r: error: size/string attributes must be used with pointer direction

        /* ------------------------------------------------------------------*/
        /* [string] [wstring] attribute cannot be used for user defined type */
        /* ------------------------------------------------------------------*/
        // int ocall_isptr_9([isptr, in, string] pMyStruct ptr, [isptr, in, wstring] pMyStruct p2);
        // Edger8r: error: `ocall_isptr_9': invalid 'string' attribute - `ptr' is not char pointer.

    };
};
